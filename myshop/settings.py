"""
Django settings for myshop project.

Generated by 'django-admin startproject' using Django 4.1.

"""

from pathlib import Path
import os
import braintree  # for credit cart
from django.utils.translation import gettext_lazy as _  # for translation

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-vkd+13c82c8u*13t(fi!&rn8&ujg8dlvwvru!iz^xw=irf=aoa'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'cart.apps.CartConfig',  # should be upper of another apps
    'payment.apps.PaymentConfig',  # should be upper of another apps
    'coupons.apps.CouponsConfig',  # should be upper of another apps
    'shop.apps.ShopConfig',
    'orders.apps.OrdersConfig',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # for write the translate for each word from english to spanish
    # on link `localhost:8000/rosetta`
    'rosetta',
    # for save data in models fields depend on languages
    'parler',
    # contains a collection of utils, such
    # as form fields or model fields, that are specific for each country
    # like: postal code
    'localflavor',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',

    # for languages, note: it should be under session cuz needs to use session data
    # and before Common, because the latter needs an active language to resolve the requested URL
    'django.middleware.locale.LocaleMiddleware',

    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'myshop.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [

                'cart.context_processors.cart',  # for make it globally access on templates

                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'myshop.wsgi.application'

# Database

# if you want to use python environment then use an exist database in your machine
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('POSTGRES_NAME'),
        'USER': os.environ.get('POSTGRES_USER'),
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD'),
        'HOST': os.environ.get('HOST'),
        'PORT': os.environ.get('PORT'),

    }
}

# Password validation


AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Default primary key field type

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Internationalization


TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True



# Static files (CSS, JavaScript, Images)

STATIC_URL = 'static/'
MEDIA_URL = 'media/'

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# the id for the cart object in the session
CART_SESSION_ID = 'cart'

# for use SMTP by contact with console
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Braintree settings
# after create account in braintree get these values
BRAINTREE_MERCHANT_ID = '2pk49mtcxnb9j996'  # Merchant ID
BRAINTREE_PUBLIC_KEY = 'yydqn6qrs8dhd68h'  # Public Key
BRAINTREE_PRIVATE_KEY = '9c216a86ec99356388889d510f5ee790'  # Private key

# we use Environment.Sandbox in development stage you should change it in the production stage
BRAINTREE_CONF = braintree.Configuration(
    braintree.Environment.Sandbox,
    BRAINTREE_MERCHANT_ID,
    BRAINTREE_PUBLIC_KEY,
    BRAINTREE_PRIVATE_KEY
)

# you should download https://mlocati.github.io/articles/gettext-iconv-windows.html
# gettext: static and shared files
# each word you put it in the gettext(word) method
# will put it in the messages files to translate it manually

# for translate
# you should use the makemessages command
# then fill the translate words in each msgstr for each word
# or you can go to rosetta to do that
# when you finish use the compilemessages command

# commands for makemessages
# django-admin makemessages --all -i venv
# or
# ./manage.py makemessages -l en -i venv
# ./manage.py makemessages -l es -i venv

# commands for compilemessages
# django-admin compilemessages

'''
if the standard language is english
then you should put the spanish words in
es messages files not in en

'''
LANGUAGES = (
    ('en', _('English')),
    ('es', _('Spanish')),
)

# the default language
LANGUAGE_CODE = 'en'

# where message files for my application will reside
# you can insert the words for each application in the same app directory
# and you can insert the files in the base directory
LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'locale/'),
)

# for save data in models fields depend on languages
# when use TranslatedFields
PARLER_LANGUAGES = {
    None: (
        {'code': 'en'},
        {'code': 'es'},
    ),
    'default': {
        'fallback': 'en',
        'hide_untranslated': False,
    }
}

# for Format localization
# like if you want to print the data or number depend on the country format
USE_L10N = True

# Redis for Recommending products

# if you want to use python environment then uncomment these lines
# and comment the another lines for redis
# REDIS_DB=1
# REDIS_HOST='localhost'
# REDIS_PORT=6379

REDIS_HOST = os.environ.get('REDIS_HOST')
REDIS_PORT = os.environ.get('REDIS_PORT')
REDIS_DB = os.environ.get('REDIS_DB')


# Connect Celery with redis url
# if you want to use python environment then uncomment these lines
CELERY_BROKER_URL = os.environ.get('CELERY_BROKER_URL')
CELERY_RESULT_BACKEND = os.environ.get('CELERY_RESULT_BACKEND')